---
interface Props {
  initialPosts: any[];
  userId: string;
  accessToken: string;
}

const { initialPosts, userId, accessToken } = Astro.props;
---

<div class="columns-1 sm:columns-2 md:columns-3 gap-4" id="posts-container">
  {initialPosts.map((post) => (
    <div class="break-inside-avoid mb-4">
      <a href={post.permalink} target="_blank" rel="noopener noreferrer">
        <img 
          src={post.media_url} 
          alt={post.caption || 'Instagram Post'} 
          class="w-full rounded-lg"
          loading="lazy"
        />
      </a>
    </div>
  ))}
</div>
<div id="scroll-trigger" class="h-10"></div>

<script define:vars={{ userId, accessToken }}>
  let nextPageUrl = null;
  let isLoading = false;

  const postsContainer = document.getElementById('posts-container');
  const scrollTrigger = document.getElementById('scroll-trigger');

  async function fetchMorePosts(url) {
    try {
      const response = await fetch(url);
      if (!response.ok) throw new Error('Error fetching posts');
      const data = await response.json();
      
      nextPageUrl = data.paging?.next || null;
      return data.data;
    } catch (error) {
      console.error('Error:', error);
      return [];
    }
  }

  function createPostElement(post) {
    return `
      <div class="break-inside-avoid mb-4">
        <a href="${post.permalink}" target="_blank" rel="noopener noreferrer">
          <img 
            src="${post.media_url}" 
            alt="${post.caption || 'Instagram Post'}" 
            class="w-full rounded-lg"
            loading="lazy"
          />
        </a>
      </div>
    `;
  }

  const observer = new IntersectionObserver(async (entries) => {
    const trigger = entries[0];
    
    if (trigger.isIntersecting && !isLoading && nextPageUrl) {
      isLoading = true;
      
      const newPosts = await fetchMorePosts(nextPageUrl);
      
      if (newPosts.length > 0) {
        const postsHTML = newPosts.map(createPostElement).join('');
        postsContainer.insertAdjacentHTML('beforeend', postsHTML);
      }
      
      isLoading = false;
    }
  }, {
    rootMargin: '200px' // Empezar a cargar cuando estemos a 200px del trigger
  });

  // Inicializar el observer
  if (scrollTrigger) {
    observer.observe(scrollTrigger);
  }

  // Establecer la URL inicial para la siguiente p√°gina
  nextPageUrl = `https://graph.instagram.com/${userId}/media?fields=id,caption,media_type,media_url,permalink,timestamp&access_token=${accessToken}&limit=12`;
</script> 